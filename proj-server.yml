Description: >
    Franklin Onyia / Udagram-project-Deploying highly avaliability webapps
    This template deploys load balancer and web server security groups.It 
    also deploys auto scaling groupsand its lunch configuration.I addition,
    we have load balancers, listeners, listeners rule,target groups,
    IAM roles and policies.
Parameters:

  EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String
  InstanceType:
      Description: 
          "The EC2 instance type"
      Type: String
      AllowedValues: [t2.medium, t3.small, t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]    
Resources:
###### Security group for load balancers
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
  ##### Security group for wbservers      
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0    
   ### lunch config resources      
  WebAppLaunchConfig:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties:
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "Udacity Demo Web Server Up and Running!" > index.html        
        # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
        ImageId: ami-0ee8244746ec5d6d4
        # ToDo: Change the key-pair name, as applicable to you. 
        
        SecurityGroups:
        - Ref: WebServerSecGroup
        InstanceType: !Ref InstanceType
        BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
   #### auto scaling group         
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs: 
        - Ref : WebAppTargetGroup
   ### load balancer     
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
  ### listener    
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  #### listener rule    
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
   ### target group     
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"              
# IAM Role to allow EC2 Session Manager to access our S3 Service
  RoleForS3ReadOnlyAccess: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: "/"  
# Instance Profile
  ServerInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - !Ref RoleForS3ReadOnlyAccess          
  RolePolicies:
      Type: AWS::IAM::Policy
      Properties:
          PolicyName: AmazonS3FullAccess
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - 
                  Effect: Allow
                  Action: 
                  -   s3:Get*
                  -   s3:List*
                  Resource: 
                  -   arn:aws:s3:::my-139182442186-bucket
                  -   arn:aws:s3:::my-139182442186-bucket/*
          Roles:
          -   Ref: RoleForS3ReadOnlyAccess
Outputs: 
  WebAppLoadBalancerDNSName:
      Description: DNS name or Public URL of the Load Balancer
      Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
      Export:
          Name: !Sub ${EnvironmentName}-LB-DNSName         

    

